{"ast":null,"code":"// UMD format: https://github.com/umdjs/umd/blob/master/templates/returnExports.js#L17\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module\n    define(['html2canvas'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(require('html2canvas'));\n  } else {\n    // Browser globals\n    root.disintegrate = factory(root.html2canvas);\n  }\n})(typeof self !== 'undefined' ? self : this, function (html2canvas) {\n  \"use strict\";\n  /********************/\n\n  /* Helper functions */\n\n  /********************/\n  // Looks for any ancestor with a data attribute of the one given\n  // If none is found with the given attribute, the parentNode is used\n\n  function findParentWithAttr(el, attr) {\n    var original = el;\n\n    while ((el = el.parentElement) && !el.hasAttribute(attr)) {\n      ;\n    }\n\n    if (original === el) el = el.parentNode;\n    return el;\n  } // From http://javascript.info/coordinates\n\n\n  function getCoords(elem) {\n    var box = elem.getBoundingClientRect();\n    return {\n      top: box.top + pageYOffset,\n      left: box.left + pageXOffset\n    };\n  } // Returns a JS array of arrays of numbers from a string\n  // Example input:   \"[255, 255, 255], [35, 35, 35]\"\n  // Example output:  [[255, 255, 255], [35, 35, 35]]\n\n\n  function getNumberArraysFromString(string) {\n    var array = [];\n    var re = /\\[(.*?)(?=\\])/g;\n    var matches;\n\n    do {\n      matches = re.exec(string);\n      if (matches) array.push(matches[1].split(',').map(Number));\n    } while (matches);\n\n    return array;\n  }\n  /**************************/\n\n  /* Disintegrate functions */\n\n  /**************************/\n\n\n  var disElems,\n      dises = [],\n      disParticleTypes = []; // Create a disObj for each Disintegrate element detected\n\n  function processDisElement(el) {\n    var ignoreColors = [];\n\n    if (el.dataset.disIgnoreColors) {\n      ignoreColors = getNumberArraysFromString(el.dataset.disIgnoreColors);\n    }\n\n    var particleType = \"Particle\";\n\n    if (el.dataset.disParticleType) {\n      particleType = el.dataset.disParticleType;\n    }\n\n    var particleColor = [];\n\n    if (el.dataset.disColor) {\n      particleColor = getNumberArraysFromString(el.dataset.disColor)[0];\n    }\n\n    var particleReductionFactor = 35;\n\n    if (el.dataset.disReductionFactor) {\n      particleReductionFactor = parseInt(el.dataset.disReductionFactor);\n    }\n\n    var disObj = {\n      elem: el,\n      type: el.dataset.disType,\n      container: undefined,\n      actualWidth: el.offsetWidth,\n      actualHeight: el.offsetHeight,\n      lastWidth: el.offsetWidth,\n      lastHeight: el.offsetHeight,\n      count: 0,\n      particleArr: [],\n      animationDuration: 100,\n      // in ms \n      canvas: undefined,\n      ctx: undefined,\n      scrnCanvas: undefined,\n      scrnCtx: undefined,\n      ignoreColors: ignoreColors,\n      isOutOfBounds: false,\n      isAnimating: false,\n      particleReductionFactor: particleReductionFactor,\n      particleType: particleType,\n      particleColor: particleColor\n    };\n    var container;\n\n    if (disObj.type === \"self-contained\") {\n      var parent = el.parentNode;\n      var wrapper = document.createElement('div');\n      wrapper.dataset.disContainer = \"\";\n      wrapper.style.width = disObj.lastWidth;\n      wrapper.style.height = disObj.lastHeight;\n      wrapper.style.overflow = \"hidden\";\n      var elemStyles = window.getComputedStyle(el);\n      wrapper.style.position = elemStyles.getPropertyValue(\"position\");\n      wrapper.style.margin = elemStyles.getPropertyValue(\"margin\");\n      wrapper.style.top = elemStyles.getPropertyValue(\"top\");\n      wrapper.style.left = elemStyles.getPropertyValue(\"left\");\n      wrapper.style.display = elemStyles.getPropertyValue(\"display\");\n      el.style.margin = 0;\n      el.style.top = 0;\n      el.style.left = 0;\n      disObj.container = wrapper;\n      parent.replaceChild(wrapper, el);\n      wrapper.appendChild(el);\n      disObj.container = wrapper;\n    } else if (disObj.type === \"contained\") {\n      // Try to use the given container if a container Id is provided\n      if (el.dataset.disContainerId && document.querySelector(\"[data-dis-id = '\" + el.dataset.disContainerId + \"']\")) {\n        disObj.container = document.querySelector(\"data-dis-container-id = \" + el.dataset.disContainerId);\n      } else {\n        // Default to using the nearest Disintegrate container or the parent node\n        disObj.container = findParentWithAttr(el, \"data-dis-container\");\n      }\n    } // Add this Disintegrate element to our list\n\n\n    dises.push(disObj); // Create the canvases for this Disintegrate element\n\n    getScreenshot(disObj); // See if all Dises have been loaded\n\n    checkAllLoaded();\n  }\n\n  function getVisibleDimensions(node, referenceNode) {\n    referenceNode = referenceNode || node.parentNode;\n    var pos = getCoords(node);\n    var referencePos = getCoords(referenceNode);\n    var overflowingTop = false,\n        overflowingRight = false,\n        overflowingBottom = false,\n        overflowingLeft = false;\n    var topCalc = node.offsetHeight - (referencePos.top - pos.top);\n\n    if (topCalc < node.offsetHeight) {\n      overflowingTop = true;\n    }\n\n    var rightCalc = referencePos.left + referenceNode.offsetWidth - pos.left;\n\n    if (rightCalc < node.offsetWidth) {\n      overflowingRight = true;\n    }\n\n    var bottomCalc = referencePos.top + referenceNode.offsetHeight - pos.top;\n\n    if (bottomCalc < node.offsetHeight) {\n      overflowingBottom = true;\n    }\n\n    var leftCalc = node.offsetWidth - (referencePos.left - pos.left);\n\n    if (leftCalc < node.offsetWidth) {\n      overflowingLeft = true;\n    }\n\n    return {\n      \"boundingRect\": pos,\n      \"referenceBoundingRect\": referencePos,\n      \"width\": Math.min(node.offsetWidth, rightCalc, leftCalc),\n      \"height\": Math.min(node.offsetHeight, bottomCalc, topCalc),\n      \"overflowingTop\": overflowingTop,\n      \"overflowingRight\": overflowingRight,\n      \"overflowingBottom\": overflowingBottom,\n      \"overflowingLeft\": overflowingLeft\n    };\n  } // See if the given Dis object is outside of its Dis container.\n  // If part of it is (compared to the last check), create particles at the\n  // newly overflowed location.\n\n\n  function checkOutOfBounds(disObj) {\n    var dimensions = getVisibleDimensions(disObj.elem, disObj.container);\n    var visibleWidth = dimensions.width;\n    var visibleHeight = dimensions.height;\n    var pos = dimensions.boundingRect;\n    var referencePos = dimensions.referenceBoundingRect;\n\n    if (!disObj.isOutOfBounds && (visibleWidth <= 0 || visibleHeight <= 0)) {\n      disObj.isOutOfBounds = true;\n      disObj.elem.dispatchEvent(new Event('disOutOfBounds'));\n    } else if (disObj.isOutOfBounds && visibleWidth > 0 && visibleHeight > 0) {\n      disObj.isOutOfBounds = false;\n      disObj.elem.dispatchEvent(new Event('disInBounds'));\n    }\n\n    disObj.actualWidth = disObj.elem.offsetWidth;\n    disObj.actualHeight = disObj.elem.offsetHeight;\n    var lastWidth = disObj.lastWidth;\n    var lastHeight = disObj.lastHeight;\n    var widthDiff = lastWidth - visibleWidth;\n    var heightDiff = lastHeight - visibleHeight;\n    var choppedLeft = disObj.actualWidth - visibleWidth;\n    var choppedTop = disObj.actualHeight - visibleHeight;\n    var containerIndex;\n\n    if (visibleWidth !== lastWidth || visibleHeight !== lastHeight) {\n      containerIndex = disObj.particleArr.length;\n      disObj.particleArr.push({\n        \"startTime\": Date.now(),\n        \"myParticles\": []\n      });\n    }\n\n    var screenshotData; // Uint8ClampedArray\n    // Right and left sides\n\n    if (visibleWidth !== lastWidth) {\n      if (Math.floor(widthDiff) > 0 && Math.floor(visibleWidth) > 0 && Math.floor(visibleHeight) > 0) {\n        var worldX; // Right side\n\n        if (dimensions.overflowingRight) {\n          worldX = pos.left + visibleWidth;\n        }\n\n        if (dimensions.overflowingTop && dimensions.overflowingRight) {\n          // Top right\n          screenshotData = disObj.scrnCtx.getImageData(visibleWidth, choppedTop, widthDiff, visibleHeight).data;\n        } else if (dimensions.overflowingRight) {\n          // Right and bottom right\n          screenshotData = disObj.scrnCtx.getImageData(visibleWidth, 0, widthDiff, visibleHeight).data;\n        } // Process the pixels overflowed\n\n\n        if (screenshotData) {\n          for (var i = 0; i < screenshotData.length; i += 4) {\n            // Do it every once in a while\n            if (disObj.count % disObj.particleReductionFactor === 0) {\n              var worldY = pos.top + Math.floor(i / 4 / widthDiff);\n\n              if (dimensions.overflowingTop) {\n                worldY += choppedTop;\n              }\n\n              var colorData = void 0;\n\n              if (disObj.particleColor.length > 0) {\n                colorData = disObj.particleColor;\n              } else {\n                colorData = screenshotData.slice(i, i + 4);\n              } // Create a particle of the given pixel color at the given location\n\n\n              createParticle(disObj, worldX - pos.left, worldY - pos.top, worldX, worldY, colorData, containerIndex);\n            }\n\n            disObj.count++;\n          }\n        } // Left side\n\n\n        if (dimensions.overflowingLeft) {\n          worldX = referencePos.left; // or pos.left + choppedLeft\n        }\n\n        if (dimensions.overflowingTop && dimensions.overflowingLeft) {\n          // Top left\n          screenshotData = disObj.scrnCtx.getImageData(disObj.actualWidth - lastWidth, choppedTop, widthDiff, visibleHeight).data;\n        } else if (dimensions.overflowingLeft) {\n          // Left and bottom left\n          screenshotData = disObj.scrnCtx.getImageData(disObj.actualWidth - lastWidth, 0, widthDiff, visibleHeight).data;\n        } // Process the pixels overflowed\n\n\n        if (screenshotData) {\n          for (var _i = 0; _i < screenshotData.length; _i += 4) {\n            // Do it every once in a while\n            if (disObj.count % disObj.particleReductionFactor === 0) {\n              var _worldY = pos.top + Math.floor(_i / 4 / widthDiff);\n\n              if (dimensions.overflowingTop) {\n                _worldY += choppedTop;\n              }\n\n              var _colorData = void 0;\n\n              if (disObj.particleColor.length > 0) {\n                _colorData = disObj.particleColor;\n              } else {\n                _colorData = screenshotData.slice(_i, _i + 4);\n              } // Create a particle of the given pixel color at the given location\n\n\n              createParticle(disObj, worldX - pos.left, _worldY - pos.top, worldX, _worldY, _colorData, containerIndex);\n            }\n\n            disObj.count++;\n          }\n        }\n      }\n\n      disObj.lastWidth = visibleWidth;\n    } // Top and bottom sides\n\n\n    if (visibleHeight !== lastHeight) {\n      if (Math.floor(heightDiff) > 0 && Math.floor(visibleWidth) > 0 && Math.floor(visibleHeight) > 0) {\n        var _worldY2; // Top side\n\n\n        if (dimensions.overflowingTop) {\n          _worldY2 = referencePos.top; // or pos.top + choppedTop\n        }\n\n        if (dimensions.overflowingTop && dimensions.overflowingLeft) {\n          // Top left\n          screenshotData = disObj.scrnCtx.getImageData(choppedLeft, disObj.actualHeight - lastHeight, visibleWidth, heightDiff).data;\n        } else if (dimensions.overflowingTop) {\n          // Top and top right\n          screenshotData = disObj.scrnCtx.getImageData(0, disObj.actualHeight - lastHeight, visibleWidth, heightDiff).data;\n        } // Process the pixels overflowed\n\n\n        if (screenshotData) {\n          for (var _i2 = 0; _i2 < screenshotData.length; _i2 += 4) {\n            // Do it every once in a while\n            if (disObj.count % disObj.particleReductionFactor === 0) {\n              var _worldX = pos.left + _i2 / 4 % visibleWidth;\n\n              if (dimensions.overflowingLeft) {\n                _worldX += choppedLeft;\n              }\n\n              var _colorData2 = void 0;\n\n              if (disObj.particleColor.length > 0) {\n                _colorData2 = disObj.particleColor;\n              } else {\n                _colorData2 = screenshotData.slice(_i2, _i2 + 4);\n              } // Create a particle of the given pixel color at the given location\n\n\n              createParticle(disObj, _worldX - pos.left, _worldY2 - pos.top, _worldX, _worldY2, _colorData2, containerIndex);\n            }\n\n            disObj.count++;\n          }\n        } // Bottom side\n\n\n        if (dimensions.overflowingBottom) {\n          _worldY2 = pos.top + visibleHeight;\n        }\n\n        if (dimensions.overflowingBottom && dimensions.overflowingLeft) {\n          // Bottom left\n          screenshotData = disObj.scrnCtx.getImageData(choppedLeft, visibleHeight, visibleWidth, heightDiff).data;\n        } else if (dimensions.overflowingBottom) {\n          // Bottom and bottom right\n          screenshotData = disObj.scrnCtx.getImageData(0, visibleHeight, visibleWidth, heightDiff).data;\n        } // Process the pixels overflowed\n\n\n        if (screenshotData) {\n          for (var _i3 = 0; _i3 < screenshotData.length; _i3 += 4) {\n            // Do it every once in a while\n            if (disObj.count % disObj.particleReductionFactor === 0) {\n              var _worldX2 = pos.left + _i3 / 4 % visibleWidth;\n\n              if (dimensions.overflowingLeft) {\n                _worldX2 += choppedLeft;\n              }\n\n              var _colorData3 = void 0;\n\n              if (disObj.particleColor.length > 0) {\n                _colorData3 = disObj.particleColor;\n              } else {\n                _colorData3 = screenshotData.slice(_i3, _i3 + 4);\n              } // Create a particle of the given pixel color at the given location\n\n\n              createParticle(disObj, _worldX2 - pos.left, _worldY2 - pos.top, _worldX2, _worldY2, _colorData3, containerIndex);\n            }\n\n            disObj.count++;\n          }\n        }\n      }\n\n      disObj.lastHeight = visibleHeight;\n    }\n\n    if (screenshotData) {\n      disObj.isAnimating = true;\n    }\n  } // Creates particles for the entire given Disintegrate object at once, to be \n  // customized by the particle type used\n\n\n  function createSimultaneousParticles(disObj) {\n    var dimensions = getVisibleDimensions(disObj.elem, disObj.container);\n    var pos = dimensions.boundingRect;\n    var screenshotData = getAllImageData(disObj);\n    disObj.particleArr[0] = {\n      \"startTime\": Date.now(),\n      \"myParticles\": []\n    }; // Process the pixels\n\n    if (screenshotData) {\n      for (var i = 0; i < screenshotData.length; i += 4) {\n        // Do it every once in a while\n        if (disObj.count % disObj.particleReductionFactor === 0) {\n          var worldX = pos.left + i / 4 % dimensions.width;\n          var worldY = pos.top + Math.floor(i / 4 / dimensions.width);\n          var colorData = void 0;\n\n          if (disObj.particleColor.length > 0) {\n            colorData = disObj.particleColor;\n          } else {\n            colorData = screenshotData.slice(i, i + 4);\n          } // Create a particle of the given pixel color at the given location\n\n\n          createParticle(disObj, worldX - pos.left, worldY - pos.top, worldX, worldY, colorData, 0);\n        }\n\n        disObj.count++;\n      }\n    }\n  } // Take a \"screenshot\" of the given Dis object's element using html2canvas\n\n\n  var numCanvasesLoaded = 0;\n\n  function getScreenshot(disObj) {\n    html2canvas(disObj.elem, {\n      scale: 1\n    }).then(function (canvas) {\n      numCanvasesLoaded++;\n\n      if (typeof disObj.scrnCanvas === \"undefined\") {\n        disObj.scrnCanvas = canvas;\n        disObj.scrnCtx = canvas.getContext('2d');\n      } // Create a canvas to draw particles on the size of the\n      // given container element\n\n\n      if (typeof disObj.canvas === \"undefined\") {\n        disObj.canvas = document.createElement(\"canvas\");\n        disObj.canvas.width = document.documentElement.scrollWidth;\n        disObj.canvas.height = document.documentElement.scrollHeight;\n        disObj.canvas.style.position = \"absolute\";\n        disObj.canvas.style.top = 0;\n        disObj.canvas.style.left = 0;\n        disObj.canvas.style.userSelect = \"none\";\n        disObj.canvas.style.pointerEvents = \"none\";\n        disObj.canvas.style.zIndex = \"1001\";\n        disObj.canvas.class = \"disParticleCanvas\";\n        disObj.ctx = disObj.canvas.getContext('2d');\n        document.body.appendChild(disObj.canvas);\n      }\n\n      if (numCanvasesLoaded === dises.length) {\n        window.dispatchEvent(new Event('particlesReady'));\n      }\n    });\n  } // Create a particle of the declared type at the given position using the given color\n\n\n  function createParticle(disObj, localX, localY, worldX, worldY, rgbArr, arrayIndex) {\n    var dontCreate = false; // Don't render the particle if the color is in the ignored list\n\n    if (disObj.ignoreColors.length > 0) {\n      disObj.ignoreColors.some(function (colorArr) {\n        if (colorArr.join(',') === rgbArr.slice(0, 3).join(',')) {\n          dontCreate = true;\n          return;\n        }\n      });\n    } // Don't create particles within area not shown due to border radius\n    // Currently only supports `border-radius: npx;` format\n\n\n    var borderRadius = Math.min(parseInt(window.getComputedStyle(disObj.elem).borderRadius), disObj.actualWidth / 2, disObj.actualHeight / 2);\n\n    if (borderRadius > 0 && (localX < borderRadius && localY < borderRadius && borderRadius < Math.sqrt(Math.pow(borderRadius - localX, 2) + Math.pow(borderRadius - localY, 2)) || localX > disObj.actualWidth - borderRadius && localY < borderRadius && borderRadius < Math.sqrt(Math.pow(localX - (disObj.actualWidth - borderRadius), 2) + Math.pow(borderRadius - localY, 2)) // Top right\n    || localX > disObj.actualWidth - borderRadius && localY > disObj.actualHeight - borderRadius && borderRadius < Math.sqrt(Math.pow(localX - (disObj.actualWidth - borderRadius), 2) + Math.pow(localY - (disObj.actualHeight - borderRadius), 2)) // Bottom right\n    || localX < borderRadius && localY > disObj.actualHeight - borderRadius && borderRadius < Math.sqrt(Math.pow(borderRadius - localX, 2) + Math.pow(localY - (disObj.actualHeight - borderRadius), 2)) // Bottom left\n    )) {\n      dontCreate = true;\n    }\n\n    if (!dontCreate) {\n      var myType = disParticleTypes[0]; // Make sure the particle type is in Disintegrate's particle type list\n\n      disParticleTypes.forEach(function (type) {\n        if (type.name === disObj.particleType) {\n          myType = type;\n        }\n      }); // Actually create the particle\n\n      var particle = new myType();\n      particle.rgbArray = rgbArr;\n      particle.startX = worldX;\n      particle.startY = worldY;\n      particle.arrayIndex = arrayIndex;\n      particle.index = disObj.particleArr[arrayIndex].myParticles.length;\n      disObj.animationDuration = particle.animationDuration;\n      disObj.particleArr[arrayIndex].myParticles.push(particle);\n    }\n  } // Animate all existing particles of the given Disintegrate element\n  // using their built in draw function\n\n\n  function animateParticles(disObj) {\n    if (typeof disObj.ctx !== \"undefined\") {\n      disObj.ctx.clearRect(0, 0, document.documentElement.scrollWidth, document.documentElement.scrollHeight);\n    }\n\n    for (var i = 0; disObj.particleArr.length > 0 && i < disObj.particleArr.length; i++) {\n      var percent = (Date.now() - disObj.particleArr[i].startTime) / disObj.animationDuration;\n\n      for (var j = 0; j < disObj.particleArr[i].myParticles.length; j++) {\n        disObj.particleArr[i].myParticles[j].draw(disObj.ctx, percent);\n      }\n\n      if (i === disObj.particleArr.length - 1 && percent > 1) {\n        // Garbage collect\n        disObj.particleArr = []; // Mark complete\n\n        disObj.elem.dispatchEvent(new Event('disComplete'));\n        disObj.isAnimating = false;\n      }\n    }\n  } // Check to see if all the Disintegrate elements detected have been successfully loaded\n\n\n  var raf;\n\n  function checkAllLoaded() {\n    if (disElems.length === dises.length) {\n      window.dispatchEvent(new Event('disesLoaded'));\n      if (typeof raf === \"undefined\") raf = window.requestAnimationFrame(disUpdate);\n    }\n  } // Return the disObj of a given element if it has one\n\n\n  function getDisObj(el) {\n    var matchedDisObj = undefined;\n    dises.forEach(function (disObj) {\n      if (disObj.elem === el) {\n        matchedDisObj = disObj;\n      }\n    });\n    return matchedDisObj;\n  } // Add a particle type for Disintegrate to recognize and look for\n\n\n  function addParticleType(func) {\n    disParticleTypes.push(func);\n  } // Returns a Uint8ClampedArray of image color data in r, g, b, a format per pixel\n  // for the whole given Disintegrate object\n\n\n  function getAllImageData(disObj) {\n    return disObj.scrnCtx.getImageData(0, 0, disObj.actualWidth, disObj.actualHeight).data;\n  } // What actually checks the bounds and animates the existing particles\n\n\n  function disUpdate() {\n    dises.forEach(function (disObj) {\n      if (disObj.type !== \"simultaneous\") {\n        checkOutOfBounds(disObj);\n      }\n\n      animateParticles(disObj);\n    });\n    window.requestAnimationFrame(disUpdate);\n  }\n  /*********************/\n\n  /* Runtime processes */\n\n  /*********************/\n  // Assure the initial capture is done\n\n\n  var firstTime = true;\n\n  function init() {\n    disElems = document.querySelectorAll(\"[data-dis-type]\");\n    dises = [];\n    numCanvasesLoaded = 0;\n\n    if (firstTime) {\n      firstTime = false;\n      window.addEventListener(\"load\", function () {\n        // Setup\n        disElems.forEach(function (el) {\n          if (el.tagName !== \"IMG\" || el.complete) {\n            processDisElement(el);\n          } else {\n            el.addEventListener(\"load\", function (e) {\n              processDisElement(el);\n            });\n          }\n        });\n      }); // Update the screenshot and canvas sizes when the window changes size\n\n      var resizeTimer;\n      window.addEventListener(\"resize\", function (e) {\n        // Wait for resize to \"finish\"\n        clearTimeout(resizeTimer);\n        resizeTimer = setTimeout(function () {\n          dises.forEach(function (disObj) {\n            getScreenshot(disObj);\n            disObj.canvas.width = document.documentElement.scrollWidth;\n            disObj.canvas.height = document.documentElement.scrollHeight;\n          });\n        }, 250);\n      });\n    } else {\n      disElems.forEach(function (el) {\n        if (el.tagName !== \"IMG\" || el.complete) {\n          processDisElement(el);\n        } else {\n          el.addEventListener(\"load\", function (e) {\n            processDisElement(el);\n          });\n        }\n      });\n    }\n  }\n  /*****************************/\n\n  /* Specific particle effects */\n\n  /*****************************/\n\n  /* An example of how particles could be created */\n  // Returns a number between -1 and 1 in a normalized (Gaussian) way using the central limit theorum\n\n\n  function genNormalizedVal() {\n    return (Math.random() + Math.random() + Math.random() + Math.random() + Math.random() + Math.random() - 3) / 3;\n  }\n\n  var EaseIn = function EaseIn(power) {\n    return function (t) {\n      return Math.pow(t, power);\n    };\n  },\n      EaseOut = function EaseOut(power) {\n    return function (t) {\n      return 1 - Math.abs(Math.pow(t - 1, power));\n    };\n  },\n      EaseInOut = function EaseInOut(power) {\n    return function (t) {\n      return t < .5 ? EaseIn(power)(t * 2) / 2 : EaseOut(power)(t * 2 - 1) / 2 + 0.5;\n    };\n  };\n\n  var Particle = function Particle() {\n    var _this = this;\n\n    this.name = \"Particle\";\n    this.animationDuration = 1000; // in ms\n\n    this.widthScaler = Math.round(50 * genNormalizedVal()); // Normalized val between -50 and 50\n\n    this.numWaves = (genNormalizedVal() + 1 / 2) * 2 + 1;\n\n    this.xPosFunc = function (t) {\n      return Math.sin(_this.numWaves * Math.PI * t);\n    };\n\n    this.heightScaler = Math.round(65 * (genNormalizedVal() + 1) / 2) + 10; // Normalized val between 10 and 75\n\n    this.yPosFunc = function (t) {\n      return t;\n    };\n\n    this.startSize = 10;\n\n    this.sizeFunc = function (t) {\n      return 1 - t;\n    };\n\n    this.opacityFactor = Math.round((genNormalizedVal() + 1) / 2 * 3 + 1);\n\n    this.opacityFunc = function (t) {\n      return 1 - EaseInOut(_this.opacityFactor)(t);\n    };\n\n    this.draw = function (ctx, percent) {\n      percent = percent >= 1 ? 1 : percent;\n\n      var currX = _this.startX + _this.xPosFunc(percent) * _this.widthScaler;\n\n      var currY = _this.startY - _this.yPosFunc(percent) * _this.heightScaler;\n\n      var currSize = _this.startSize * _this.sizeFunc(percent);\n\n      var currOpacity = _this.opacityFunc(percent);\n\n      ctx.fillStyle = \"rgba(\" + _this.rgbArray[0] + ',' + _this.rgbArray[1] + ',' + _this.rgbArray[2] + ',' + currOpacity + \")\";\n      ctx.fillRect(currX - currSize / 2, currY - currSize / 2, currSize, currSize);\n    };\n  };\n\n  addParticleType(Particle);\n  /* An \"exploding\" particle effect that uses circles */\n\n  var ExplodingParticle = function ExplodingParticle() {\n    var _this2 = this;\n\n    this.name = \"ExplodingParticle\";\n    this.animationDuration = 1000; // in ms\n\n    this.speed = {\n      x: -5 + Math.random() * 10,\n      y: -5 + Math.random() * 10\n    };\n    this.radius = 5 + Math.random() * 5;\n    this.life = 30 + Math.random() * 10;\n    this.remainingLife = this.life;\n\n    this.draw = function (ctx) {\n      if (_this2.remainingLife > 0 && _this2.radius > 0) {\n        ctx.beginPath();\n        ctx.arc(_this2.startX, _this2.startY, _this2.radius, 0, Math.PI * 2);\n        ctx.fillStyle = \"rgba(\" + _this2.rgbArray[0] + ',' + _this2.rgbArray[1] + ',' + _this2.rgbArray[2] + \", 1)\";\n        ctx.fill();\n        _this2.remainingLife--;\n        _this2.radius -= 0.25;\n        _this2.startX += _this2.speed.x;\n        _this2.startY += _this2.speed.y;\n      }\n    };\n  };\n\n  addParticleType(ExplodingParticle);\n  return {\n    init: init,\n    dises: dises,\n    createSimultaneousParticles: createSimultaneousParticles,\n    getDisObj: getDisObj,\n    addParticleType: addParticleType\n  };\n});","map":{"version":3,"sources":["C:/MERN Projects/BombParty/bombparty/node_modules/disintegrate/disintegrate.js"],"names":["root","factory","define","amd","module","exports","require","disintegrate","html2canvas","self","findParentWithAttr","el","attr","original","parentElement","hasAttribute","parentNode","getCoords","elem","box","getBoundingClientRect","top","pageYOffset","left","pageXOffset","getNumberArraysFromString","string","array","re","matches","exec","push","split","map","Number","disElems","dises","disParticleTypes","processDisElement","ignoreColors","dataset","disIgnoreColors","particleType","disParticleType","particleColor","disColor","particleReductionFactor","disReductionFactor","parseInt","disObj","type","disType","container","undefined","actualWidth","offsetWidth","actualHeight","offsetHeight","lastWidth","lastHeight","count","particleArr","animationDuration","canvas","ctx","scrnCanvas","scrnCtx","isOutOfBounds","isAnimating","parent","wrapper","document","createElement","disContainer","style","width","height","overflow","elemStyles","window","getComputedStyle","position","getPropertyValue","margin","display","replaceChild","appendChild","disContainerId","querySelector","getScreenshot","checkAllLoaded","getVisibleDimensions","node","referenceNode","pos","referencePos","overflowingTop","overflowingRight","overflowingBottom","overflowingLeft","topCalc","rightCalc","bottomCalc","leftCalc","Math","min","checkOutOfBounds","dimensions","visibleWidth","visibleHeight","boundingRect","referenceBoundingRect","dispatchEvent","Event","widthDiff","heightDiff","choppedLeft","choppedTop","containerIndex","length","Date","now","screenshotData","floor","worldX","getImageData","data","i","worldY","colorData","slice","createParticle","createSimultaneousParticles","getAllImageData","numCanvasesLoaded","scale","then","getContext","documentElement","scrollWidth","scrollHeight","userSelect","pointerEvents","zIndex","class","body","localX","localY","rgbArr","arrayIndex","dontCreate","some","colorArr","join","borderRadius","sqrt","pow","myType","forEach","name","particle","rgbArray","startX","startY","index","myParticles","animateParticles","clearRect","percent","startTime","j","draw","raf","requestAnimationFrame","disUpdate","getDisObj","matchedDisObj","addParticleType","func","firstTime","init","querySelectorAll","addEventListener","tagName","complete","e","resizeTimer","clearTimeout","setTimeout","genNormalizedVal","random","EaseIn","power","t","EaseOut","abs","EaseInOut","Particle","widthScaler","round","numWaves","xPosFunc","sin","PI","heightScaler","yPosFunc","startSize","sizeFunc","opacityFactor","opacityFunc","currX","currY","currSize","currOpacity","fillStyle","fillRect","ExplodingParticle","speed","x","y","radius","life","remainingLife","beginPath","arc","fill"],"mappings":"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","sourcesContent":["// UMD format: https://github.com/umdjs/umd/blob/master/templates/returnExports.js#L17\r\n(function (root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    // AMD. Register as an anonymous module\r\n    define(['html2canvas'], factory);\r\n  } else if (typeof module === 'object' && module.exports) {\r\n    // Node. Does not work with strict CommonJS, but\r\n    // only CommonJS-like environments that support module.exports,\r\n    // like Node.\r\n    module.exports = factory(require('html2canvas'));\r\n  } else {\r\n    // Browser globals\r\n    root.disintegrate = factory(root.html2canvas);\r\n  }\r\n}(typeof self !== 'undefined' ? self : this, function (html2canvas) {\r\n\r\n\"use strict\"\r\n\r\n/********************/\r\n/* Helper functions */\r\n/********************/\r\n\r\n// Looks for any ancestor with a data attribute of the one given\r\n// If none is found with the given attribute, the parentNode is used\r\nfunction findParentWithAttr(el, attr) {\r\n  let original = el;\r\n  while ((el = el.parentElement) && !el.hasAttribute(attr));\r\n  if(original === el) el = el.parentNode;\r\n  return el;\r\n} \r\n\r\n// From http://javascript.info/coordinates\r\nfunction getCoords(elem) {\r\n  let box = elem.getBoundingClientRect();\r\n\r\n  return {\r\n    top: box.top + pageYOffset,\r\n    left: box.left + pageXOffset\r\n  };\r\n}\r\n\r\n// Returns a JS array of arrays of numbers from a string\r\n// Example input:   \"[255, 255, 255], [35, 35, 35]\"\r\n// Example output:  [[255, 255, 255], [35, 35, 35]]\r\nfunction getNumberArraysFromString(string) {\r\n  let array = [];\r\n  let re = /\\[(.*?)(?=\\])/g;\r\n  let matches;\r\n  do {\r\n    matches = re.exec(string);\r\n    if(matches)\r\n      array.push(matches[1].split(',').map(Number));\r\n  } while (matches);\r\n\r\n  return array;\r\n}\r\n\r\n/**************************/\r\n/* Disintegrate functions */\r\n/**************************/\r\n\r\nvar disElems,\r\n    dises = [],\r\n    disParticleTypes = [];\r\n\r\n// Create a disObj for each Disintegrate element detected\r\nfunction processDisElement(el) {\r\n  let ignoreColors = [];\r\n  if(el.dataset.disIgnoreColors) {\r\n    ignoreColors = getNumberArraysFromString(el.dataset.disIgnoreColors);\r\n  }\r\n\r\n  let particleType = \"Particle\";\r\n  if(el.dataset.disParticleType) {\r\n    particleType = el.dataset.disParticleType;\r\n  }\r\n\r\n  let particleColor = [];\r\n  if(el.dataset.disColor) {\r\n    particleColor = getNumberArraysFromString(el.dataset.disColor)[0];\r\n  }\r\n\r\n  let particleReductionFactor = 35;\r\n  if(el.dataset.disReductionFactor) {\r\n    particleReductionFactor = parseInt(el.dataset.disReductionFactor);\r\n  }\r\n\r\n  let disObj = {\r\n    elem: el,\r\n    type: el.dataset.disType,\r\n    container: undefined,\r\n    actualWidth: el.offsetWidth,\r\n    actualHeight: el.offsetHeight,\r\n    lastWidth: el.offsetWidth,\r\n    lastHeight: el.offsetHeight,\r\n    count: 0,\r\n    particleArr: [],\r\n    animationDuration: 100,  // in ms \r\n    canvas: undefined,\r\n    ctx: undefined,\r\n    scrnCanvas: undefined,\r\n    scrnCtx: undefined,\r\n    ignoreColors: ignoreColors,\r\n    isOutOfBounds: false,\r\n    isAnimating: false,\r\n    particleReductionFactor: particleReductionFactor,\r\n    particleType: particleType,\r\n    particleColor: particleColor\r\n  };\r\n\r\n  let container;\r\n  if(disObj.type === \"self-contained\") {\r\n    let parent = el.parentNode;\r\n    let wrapper = document.createElement('div');\r\n    wrapper.dataset.disContainer = \"\";\r\n    wrapper.style.width = disObj.lastWidth;\r\n    wrapper.style.height = disObj.lastHeight;\r\n    wrapper.style.overflow = \"hidden\";\r\n    let elemStyles = window.getComputedStyle(el);\r\n    wrapper.style.position = elemStyles.getPropertyValue(\"position\");\r\n    wrapper.style.margin = elemStyles.getPropertyValue(\"margin\");\r\n    wrapper.style.top = elemStyles.getPropertyValue(\"top\");\r\n    wrapper.style.left = elemStyles.getPropertyValue(\"left\");\r\n    wrapper.style.display = elemStyles.getPropertyValue(\"display\");\r\n    el.style.margin = 0;\r\n    el.style.top = 0;\r\n    el.style.left = 0;\r\n\r\n    disObj.container = wrapper;\r\n\r\n    parent.replaceChild(wrapper, el);\r\n    wrapper.appendChild(el);\r\n\r\n    disObj.container = wrapper;\r\n  } else if(disObj.type === \"contained\") {\r\n    // Try to use the given container if a container Id is provided\r\n    if(el.dataset.disContainerId && document.querySelector(\"[data-dis-id = '\" + el.dataset.disContainerId + \"']\")) {\r\n      disObj.container = document.querySelector(\"data-dis-container-id = \" + el.dataset.disContainerId);\r\n    } else {\r\n      // Default to using the nearest Disintegrate container or the parent node\r\n      disObj.container = findParentWithAttr(el, \"data-dis-container\");\r\n    }\r\n  }\r\n  \r\n  // Add this Disintegrate element to our list\r\n  dises.push(disObj);\r\n  // Create the canvases for this Disintegrate element\r\n  getScreenshot(disObj);\r\n  // See if all Dises have been loaded\r\n  checkAllLoaded();\r\n}\r\n\r\nfunction getVisibleDimensions(node, referenceNode) {\r\n  referenceNode = referenceNode || node.parentNode;\r\n  \r\n  let pos = getCoords(node);\r\n  let referencePos = getCoords(referenceNode);\r\n\r\n  let overflowingTop = false,\r\n      overflowingRight = false,\r\n      overflowingBottom = false,\r\n      overflowingLeft = false;\r\n\r\n  let topCalc = node.offsetHeight - (referencePos.top - pos.top);\r\n  if(topCalc < node.offsetHeight) {\r\n    overflowingTop = true;\r\n  }\r\n  let rightCalc = referencePos.left + referenceNode.offsetWidth - pos.left;\r\n  if(rightCalc < node.offsetWidth) {\r\n    overflowingRight = true;\r\n  }\r\n  let bottomCalc = referencePos.top + referenceNode.offsetHeight - pos.top;\r\n  if(bottomCalc < node.offsetHeight) {\r\n    overflowingBottom = true;\r\n  }\r\n  let leftCalc = node.offsetWidth - (referencePos.left - pos.left);\r\n  if(leftCalc < node.offsetWidth) {\r\n    overflowingLeft = true;\r\n  }\r\n  \r\n  return {\r\n    \"boundingRect\": pos,\r\n    \"referenceBoundingRect\": referencePos,\r\n    \"width\": Math.min(\r\n      node.offsetWidth,\r\n      rightCalc, \r\n      leftCalc\r\n    ),\r\n    \"height\": Math.min(\r\n      node.offsetHeight, \r\n      bottomCalc,\r\n      topCalc\r\n    ),\r\n    \"overflowingTop\": overflowingTop,\r\n    \"overflowingRight\": overflowingRight,\r\n    \"overflowingBottom\": overflowingBottom,\r\n    \"overflowingLeft\": overflowingLeft\r\n  }\r\n}\r\n\r\n// See if the given Dis object is outside of its Dis container.\r\n// If part of it is (compared to the last check), create particles at the\r\n// newly overflowed location.\r\nfunction checkOutOfBounds(disObj) {\r\n  let dimensions = getVisibleDimensions(disObj.elem, disObj.container);\r\n  \r\n  let visibleWidth = dimensions.width;\r\n  let visibleHeight = dimensions.height;\r\n  let pos = dimensions.boundingRect;\r\n  let referencePos = dimensions.referenceBoundingRect;\r\n\r\n  if(!disObj.isOutOfBounds && (visibleWidth <= 0 || visibleHeight <= 0)) {\r\n    disObj.isOutOfBounds = true;\r\n    disObj.elem.dispatchEvent(new Event('disOutOfBounds'));\r\n  } else if(disObj.isOutOfBounds && (visibleWidth > 0 && visibleHeight > 0)) {\r\n    disObj.isOutOfBounds = false;\r\n    disObj.elem.dispatchEvent(new Event('disInBounds'));\r\n  }\r\n\r\n  disObj.actualWidth = disObj.elem.offsetWidth;\r\n  disObj.actualHeight = disObj.elem.offsetHeight;\r\n\r\n  let lastWidth = disObj.lastWidth;\r\n  let lastHeight = disObj.lastHeight;\r\n\r\n  let widthDiff = lastWidth - visibleWidth;\r\n  let heightDiff = lastHeight - visibleHeight;\r\n\r\n  let choppedLeft = disObj.actualWidth - visibleWidth;\r\n  let choppedTop = disObj.actualHeight - visibleHeight;\r\n\r\n  let containerIndex;\r\n  if(visibleWidth !== lastWidth \r\n  || visibleHeight !== lastHeight) {\r\n    containerIndex = disObj.particleArr.length;\r\n    disObj.particleArr.push({\r\n      \"startTime\": Date.now(),\r\n      \"myParticles\": []\r\n    });\r\n  }\r\n\r\n  let screenshotData; // Uint8ClampedArray\r\n\r\n  // Right and left sides\r\n  if(visibleWidth !== lastWidth) {\r\n\r\n    if(Math.floor(widthDiff) > 0\r\n    && Math.floor(visibleWidth) > 0\r\n    && Math.floor(visibleHeight) > 0) {\r\n  \r\n      let worldX;\r\n\r\n      // Right side\r\n      if(dimensions.overflowingRight) {\r\n        worldX = pos.left + visibleWidth;\r\n      }\r\n\r\n      if(dimensions.overflowingTop\r\n      && dimensions.overflowingRight) { // Top right\r\n        screenshotData = disObj.scrnCtx.getImageData(visibleWidth, choppedTop, widthDiff, visibleHeight).data;\r\n      } else if(dimensions.overflowingRight) { // Right and bottom right\r\n        screenshotData = disObj.scrnCtx.getImageData(visibleWidth, 0, widthDiff, visibleHeight).data;\r\n      }\r\n\r\n      // Process the pixels overflowed\r\n      if(screenshotData) {\r\n        for(let i = 0; i < screenshotData.length; i += 4) {\r\n          // Do it every once in a while\r\n          if(disObj.count % disObj.particleReductionFactor === 0) {\r\n            let worldY = pos.top + Math.floor((i / 4) / widthDiff);\r\n\r\n            if(dimensions.overflowingTop) {\r\n              worldY += choppedTop;\r\n            }\r\n            let colorData;\r\n            if(disObj.particleColor.length > 0) {\r\n              colorData = disObj.particleColor;\r\n            } else {\r\n              colorData = screenshotData.slice(i, i + 4);\r\n            }\r\n\r\n            // Create a particle of the given pixel color at the given location\r\n            createParticle(disObj, worldX - pos.left, worldY - pos.top, worldX, worldY, colorData, containerIndex);\r\n          }\r\n          disObj.count++;\r\n        }\r\n      } \r\n\r\n      // Left side\r\n      if(dimensions.overflowingLeft) {\r\n        worldX = referencePos.left; // or pos.left + choppedLeft\r\n      }\r\n\r\n      if(dimensions.overflowingTop\r\n      && dimensions.overflowingLeft) { // Top left\r\n        screenshotData = disObj.scrnCtx.getImageData(disObj.actualWidth - lastWidth, choppedTop, widthDiff, visibleHeight).data;\r\n      } else if(dimensions.overflowingLeft) { // Left and bottom left\r\n        screenshotData = disObj.scrnCtx.getImageData(disObj.actualWidth - lastWidth, 0, widthDiff, visibleHeight).data;\r\n      }\r\n\r\n      // Process the pixels overflowed\r\n      if(screenshotData) {\r\n        for(let i = 0; i < screenshotData.length; i += 4) {\r\n          // Do it every once in a while\r\n          if(disObj.count % disObj.particleReductionFactor === 0) {\r\n            let worldY = pos.top + Math.floor((i / 4) / widthDiff);\r\n\r\n            if(dimensions.overflowingTop) {\r\n              worldY += choppedTop;\r\n            }\r\n            let colorData;\r\n            if(disObj.particleColor.length > 0) {\r\n              colorData = disObj.particleColor;\r\n            } else {\r\n              colorData = screenshotData.slice(i, i + 4);\r\n            }\r\n\r\n            // Create a particle of the given pixel color at the given location\r\n            createParticle(disObj, worldX - pos.left, worldY - pos.top, worldX, worldY, colorData, containerIndex);\r\n          }\r\n          disObj.count++;\r\n        }\r\n      } \r\n\r\n    }\r\n\r\n    disObj.lastWidth = visibleWidth;\r\n  }\r\n\r\n  // Top and bottom sides\r\n  if(visibleHeight !== lastHeight) {\r\n    if(Math.floor(heightDiff) > 0\r\n    && Math.floor(visibleWidth) > 0\r\n    && Math.floor(visibleHeight) > 0) {\r\n      \r\n      let worldY;\r\n\r\n      // Top side\r\n      if(dimensions.overflowingTop) {\r\n        worldY = referencePos.top; // or pos.top + choppedTop\r\n      }\r\n\r\n      if(dimensions.overflowingTop\r\n      && dimensions.overflowingLeft) { // Top left\r\n        screenshotData = disObj.scrnCtx.getImageData(choppedLeft, disObj.actualHeight - lastHeight, visibleWidth, heightDiff).data;\r\n      } else if(dimensions.overflowingTop) { // Top and top right\r\n        screenshotData = disObj.scrnCtx.getImageData(0, disObj.actualHeight - lastHeight, visibleWidth, heightDiff).data;\r\n      }\r\n\r\n      // Process the pixels overflowed\r\n      if(screenshotData) {\r\n        for(let i = 0; i < screenshotData.length; i += 4) {\r\n          // Do it every once in a while\r\n          if(disObj.count % disObj.particleReductionFactor === 0) {\r\n            let worldX = pos.left + (i / 4) % visibleWidth;\r\n\r\n            if(dimensions.overflowingLeft) {\r\n              worldX += choppedLeft;\r\n            }\r\n            let colorData;\r\n            if(disObj.particleColor.length > 0) {\r\n              colorData = disObj.particleColor;\r\n            } else {\r\n              colorData = screenshotData.slice(i, i + 4);\r\n            }\r\n\r\n            // Create a particle of the given pixel color at the given location\r\n            createParticle(disObj, worldX - pos.left, worldY - pos.top, worldX, worldY, colorData, containerIndex);\r\n          }\r\n          disObj.count++;\r\n        }\r\n      } \r\n\r\n      // Bottom side\r\n      if(dimensions.overflowingBottom) {\r\n        worldY = pos.top + visibleHeight;\r\n      }\r\n\r\n      if(dimensions.overflowingBottom\r\n      && dimensions.overflowingLeft) { // Bottom left\r\n        screenshotData = disObj.scrnCtx.getImageData(choppedLeft, visibleHeight, visibleWidth, heightDiff).data;\r\n      } else if(dimensions.overflowingBottom) { // Bottom and bottom right\r\n        screenshotData = disObj.scrnCtx.getImageData(0, visibleHeight, visibleWidth, heightDiff).data;\r\n      }\r\n\r\n      // Process the pixels overflowed\r\n      if(screenshotData) {\r\n        for(let i = 0; i < screenshotData.length; i += 4) {\r\n          // Do it every once in a while\r\n          if(disObj.count % disObj.particleReductionFactor === 0) {\r\n            let worldX = pos.left + (i / 4) % visibleWidth;\r\n\r\n            if(dimensions.overflowingLeft) {\r\n              worldX += choppedLeft;\r\n            }\r\n            let colorData;\r\n            if(disObj.particleColor.length > 0) {\r\n              colorData = disObj.particleColor;\r\n            } else {\r\n              colorData = screenshotData.slice(i, i + 4);\r\n            }\r\n\r\n            // Create a particle of the given pixel color at the given location\r\n            createParticle(disObj, worldX - pos.left, worldY - pos.top, worldX, worldY, colorData, containerIndex);\r\n          }\r\n          disObj.count++;\r\n        }\r\n      } \r\n    }\r\n\r\n    disObj.lastHeight = visibleHeight;\r\n  }\r\n\r\n  if(screenshotData) {\r\n    disObj.isAnimating = true;\r\n  } \r\n}\r\n\r\n// Creates particles for the entire given Disintegrate object at once, to be \r\n// customized by the particle type used\r\nfunction createSimultaneousParticles(disObj) {\r\n  let dimensions = getVisibleDimensions(disObj.elem, disObj.container);\r\n  let pos = dimensions.boundingRect;\r\n\r\n  let screenshotData = getAllImageData(disObj);\r\n\r\n  disObj.particleArr[0] = {\r\n    \"startTime\": Date.now(),\r\n    \"myParticles\": []\r\n  };\r\n\r\n  // Process the pixels\r\n  if(screenshotData) {\r\n    for(let i = 0; i < screenshotData.length; i += 4) {\r\n      // Do it every once in a while\r\n      if(disObj.count % disObj.particleReductionFactor === 0) {\r\n        let worldX = pos.left + (i / 4) % dimensions.width;\r\n        let worldY = pos.top + Math.floor((i / 4) / dimensions.width);\r\n\r\n        let colorData;\r\n        if(disObj.particleColor.length > 0) {\r\n          colorData = disObj.particleColor;\r\n        } else {\r\n          colorData = screenshotData.slice(i, i + 4);\r\n        }\r\n\r\n        // Create a particle of the given pixel color at the given location\r\n        createParticle(disObj, worldX - pos.left, worldY - pos.top, worldX, worldY, colorData, 0);\r\n      }\r\n      disObj.count++;\r\n    }\r\n  } \r\n}\r\n\r\n// Take a \"screenshot\" of the given Dis object's element using html2canvas\r\nvar numCanvasesLoaded = 0;\r\nfunction getScreenshot(disObj) {\r\n  html2canvas(disObj.elem, { scale: 1 }).then( canvas => {\r\n    numCanvasesLoaded++;\r\n    if(typeof disObj.scrnCanvas === \"undefined\") {\r\n      disObj.scrnCanvas = canvas;\r\n      disObj.scrnCtx = canvas.getContext('2d');\r\n    }\r\n      \r\n    // Create a canvas to draw particles on the size of the\r\n    // given container element\r\n    if(typeof disObj.canvas === \"undefined\") {\r\n      disObj.canvas = document.createElement(\"canvas\");\r\n      disObj.canvas.width = document.documentElement.scrollWidth; \r\n      disObj.canvas.height = document.documentElement.scrollHeight;\r\n      disObj.canvas.style.position = \"absolute\"; \r\n      disObj.canvas.style.top = 0;\r\n      disObj.canvas.style.left = 0;\r\n      disObj.canvas.style.userSelect = \"none\";\r\n      disObj.canvas.style.pointerEvents = \"none\";\r\n      disObj.canvas.style.zIndex = \"1001\";\r\n      disObj.canvas.class = \"disParticleCanvas\";\r\n      disObj.ctx = disObj.canvas.getContext('2d');\r\n      document.body.appendChild(disObj.canvas);\r\n    }\r\n\r\n    if(numCanvasesLoaded === dises.length) {\r\n      window.dispatchEvent(new Event('particlesReady'));\r\n    }\r\n  });\r\n}\r\n\r\n// Create a particle of the declared type at the given position using the given color\r\nfunction createParticle(disObj, localX, localY, worldX, worldY, rgbArr, arrayIndex) {\r\n  let dontCreate = false;\r\n\r\n  // Don't render the particle if the color is in the ignored list\r\n  if(disObj.ignoreColors.length > 0) {\r\n    disObj.ignoreColors.some( colorArr => {\r\n      if(colorArr.join(',') === rgbArr.slice(0, 3).join(',')) {\r\n        dontCreate = true;\r\n        return;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Don't create particles within area not shown due to border radius\r\n  // Currently only supports `border-radius: npx;` format\r\n  let borderRadius = Math.min(\r\n                      parseInt(window.getComputedStyle(disObj.elem).borderRadius), \r\n                      disObj.actualWidth / 2, \r\n                      disObj.actualHeight / 2\r\n                     );\r\n  if(borderRadius > 0\r\n  && ( (localX < borderRadius && localY < borderRadius && borderRadius < Math.sqrt(Math.pow(borderRadius - localX, 2) + Math.pow(borderRadius - localY, 2)) ) // Top left\r\n    || (localX > disObj.actualWidth - borderRadius && localY < borderRadius && borderRadius < Math.sqrt(Math.pow(localX - (disObj.actualWidth - borderRadius), 2) + Math.pow(borderRadius - localY, 2)) ) // Top right\r\n    || (localX > disObj.actualWidth - borderRadius && localY > disObj.actualHeight - borderRadius && borderRadius < Math.sqrt(Math.pow(localX - (disObj.actualWidth - borderRadius), 2) + Math.pow(localY - (disObj.actualHeight - borderRadius), 2)) ) // Bottom right\r\n    || (localX < borderRadius && localY > disObj.actualHeight - borderRadius && borderRadius < Math.sqrt(Math.pow(borderRadius - localX, 2) + Math.pow(localY - (disObj.actualHeight - borderRadius), 2)) ) // Bottom left\r\n  )) {\r\n    dontCreate = true;\r\n  }\r\n\r\n  if(!dontCreate) {\r\n    let myType = disParticleTypes[0];\r\n    // Make sure the particle type is in Disintegrate's particle type list\r\n    disParticleTypes.forEach( type => {\r\n      if(type.name === disObj.particleType) {\r\n        myType = type;\r\n      }\r\n    });\r\n\r\n    // Actually create the particle\r\n    let particle = new myType;\r\n    particle.rgbArray = rgbArr;\r\n    particle.startX = worldX;\r\n    particle.startY = worldY;\r\n    particle.arrayIndex = arrayIndex;\r\n    particle.index = disObj.particleArr[arrayIndex].myParticles.length;\r\n\r\n    disObj.animationDuration = particle.animationDuration;\r\n    disObj.particleArr[arrayIndex].myParticles.push(particle);\r\n  }\r\n}\r\n\r\n// Animate all existing particles of the given Disintegrate element\r\n// using their built in draw function\r\nfunction animateParticles(disObj) {\r\n  if(typeof disObj.ctx !== \"undefined\") {\r\n    disObj.ctx.clearRect(0, 0, document.documentElement.scrollWidth, document.documentElement.scrollHeight);\r\n  }\r\n\r\n  for(let i = 0; (disObj.particleArr.length > 0 && i < disObj.particleArr.length); i++) {\r\n    let percent = (Date.now() - disObj.particleArr[i].startTime) / disObj.animationDuration;\r\n\r\n    for(let j = 0; j < disObj.particleArr[i].myParticles.length; j++) {\r\n      disObj.particleArr[i].myParticles[j].draw(disObj.ctx, percent);\r\n    }\r\n\r\n    if(i === disObj.particleArr.length - 1 && percent > 1) { \r\n      // Garbage collect\r\n      disObj.particleArr = [];\r\n      // Mark complete\r\n      disObj.elem.dispatchEvent(new Event('disComplete'));\r\n      disObj.isAnimating = false;\r\n    }\r\n  }\r\n}\r\n\r\n// Check to see if all the Disintegrate elements detected have been successfully loaded\r\nvar raf;\r\nfunction checkAllLoaded() {\r\n  if(disElems.length === dises.length) {\r\n    window.dispatchEvent(new Event('disesLoaded'));\r\n\r\n    if(typeof raf === \"undefined\")\r\n      raf = window.requestAnimationFrame(disUpdate);\r\n  }\r\n}\r\n\r\n// Return the disObj of a given element if it has one\r\nfunction getDisObj(el) {\r\n  let matchedDisObj = undefined;\r\n  dises.forEach( disObj => {\r\n    if(disObj.elem === el) {\r\n      matchedDisObj = disObj;\r\n    }\r\n  });\r\n  return matchedDisObj;\r\n}\r\n\r\n// Add a particle type for Disintegrate to recognize and look for\r\nfunction addParticleType(func) {\r\n  disParticleTypes.push(func);\r\n}\r\n\r\n// Returns a Uint8ClampedArray of image color data in r, g, b, a format per pixel\r\n// for the whole given Disintegrate object\r\nfunction getAllImageData(disObj) {\r\n  return disObj.scrnCtx.getImageData(0, 0, disObj.actualWidth, disObj.actualHeight).data; \r\n}\r\n\r\n// What actually checks the bounds and animates the existing particles\r\nfunction disUpdate() {\r\n  dises.forEach( disObj => {\r\n    if(disObj.type !== \"simultaneous\") {\r\n      checkOutOfBounds(disObj);\r\n    }\r\n\r\n    animateParticles(disObj);\r\n  });\r\n\r\n  window.requestAnimationFrame(disUpdate);\r\n}\r\n\r\n/*********************/\r\n/* Runtime processes */\r\n/*********************/\r\n\r\n// Assure the initial capture is done\r\nlet firstTime = true;\r\nfunction init() {\r\n  disElems = document.querySelectorAll(\"[data-dis-type]\");\r\n  dises = [];\r\n  numCanvasesLoaded = 0;\r\n  \r\n  if(firstTime) {\r\n    firstTime = false;\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      // Setup\r\n      disElems.forEach( el => {\r\n        if(el.tagName !== \"IMG\" || el.complete) {\r\n          processDisElement(el);\r\n        } else {\r\n          el.addEventListener(\"load\", e => {\r\n            processDisElement(el);\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    // Update the screenshot and canvas sizes when the window changes size\r\n    var resizeTimer;\r\n    window.addEventListener(\"resize\", e => {\r\n\r\n      // Wait for resize to \"finish\"\r\n      clearTimeout(resizeTimer);\r\n      resizeTimer = setTimeout( () => {\r\n\r\n        dises.forEach( disObj => {\r\n          getScreenshot(disObj);\r\n\r\n          disObj.canvas.width = document.documentElement.scrollWidth; \r\n          disObj.canvas.height = document.documentElement.scrollHeight;\r\n        });\r\n\r\n      }, 250);\r\n    });\r\n  } else {\r\n    disElems.forEach( el => {\r\n      if(el.tagName !== \"IMG\" || el.complete) {\r\n        processDisElement(el);\r\n      } else {\r\n        el.addEventListener(\"load\", e => {\r\n          processDisElement(el);\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n/*****************************/\r\n/* Specific particle effects */\r\n/*****************************/\r\n\r\n/* An example of how particles could be created */\r\n\r\n// Returns a number between -1 and 1 in a normalized (Gaussian) way using the central limit theorum\r\nfunction genNormalizedVal() {\r\n  return ((Math.random() + Math.random() + Math.random() + Math.random() + Math.random() + Math.random() - 3)) / 3;\r\n}\r\n\r\nconst EaseIn    = power => t => Math.pow(t, power),\r\n      EaseOut   = power => t => 1 - Math.abs(Math.pow(t-1, power)),\r\n      EaseInOut = power => t => t<.5 ? EaseIn(power)(t*2)/2 : EaseOut(power)(t*2 - 1)/2+0.5;\r\nvar Particle = function() {\r\n  this.name = \"Particle\";\r\n  this.animationDuration = 1000; // in ms\r\n\r\n  this.widthScaler = Math.round(50 * genNormalizedVal()); // Normalized val between -50 and 50\r\n  this.numWaves = (genNormalizedVal() + 1 / 2) * 2 + 1;\r\n  this.xPosFunc = t => { return Math.sin(this.numWaves * Math.PI * t); }; \r\n\r\n  this.heightScaler = Math.round(65 * (genNormalizedVal() + 1) / 2) + 10; // Normalized val between 10 and 75\r\n  this.yPosFunc = t => { return t; }; \r\n  \r\n  this.startSize = 10;\r\n  this.sizeFunc = t => { return 1 - t; };\r\n\r\n  this.opacityFactor = Math.round(((genNormalizedVal() + 1) / 2) * 3 + 1);\r\n  this.opacityFunc = t => { return 1 - EaseInOut(this.opacityFactor)(t); };\r\n  \r\n  this.draw = (ctx, percent) => {\r\n    percent = percent >= 1 ? 1 : percent;\r\n\r\n    let currX = this.startX + this.xPosFunc(percent) * this.widthScaler;\r\n    let currY = this.startY - this.yPosFunc(percent) * this.heightScaler;\r\n    let currSize = this.startSize * this.sizeFunc(percent);\r\n    let currOpacity = this.opacityFunc(percent);\r\n\r\n    ctx.fillStyle = \"rgba(\" + this.rgbArray[0] + ',' + this.rgbArray[1] + ',' + this.rgbArray[2] + ',' + currOpacity + \")\";\r\n    ctx.fillRect(currX - currSize / 2, currY  - currSize / 2, currSize, currSize);\r\n  };\r\n};\r\naddParticleType(Particle);\r\n\r\n\r\n/* An \"exploding\" particle effect that uses circles */\r\nvar ExplodingParticle = function() {\r\n  this.name = \"ExplodingParticle\";\r\n  this.animationDuration = 1000; // in ms\r\n\r\n  this.speed = {\r\n    x: -5 + Math.random() * 10,\r\n    y: -5 + Math.random() * 10\r\n  };\r\n  this.radius = 5 + Math.random() * 5;\r\n  this.life = 30 + Math.random() * 10;\r\n  this.remainingLife = this.life;\r\n  this.draw = ctx => {\r\n    if(this.remainingLife > 0\r\n    && this.radius > 0) {\r\n      ctx.beginPath();\r\n      ctx.arc(this.startX, this.startY, this.radius, 0, Math.PI * 2);\r\n      ctx.fillStyle = \"rgba(\" + this.rgbArray[0] + ',' + this.rgbArray[1] + ',' + this.rgbArray[2] + \", 1)\";\r\n      ctx.fill();\r\n      this.remainingLife--;\r\n      this.radius -= 0.25;\r\n      this.startX += this.speed.x;\r\n      this.startY += this.speed.y;\r\n    }\r\n  }\r\n}\r\naddParticleType(ExplodingParticle);\r\n\r\n\r\nreturn {\r\n  init,\r\n  dises,\r\n  createSimultaneousParticles,\r\n  getDisObj,\r\n  addParticleType\r\n};\r\n}));\r\n"]},"metadata":{},"sourceType":"script"}