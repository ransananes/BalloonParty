{"ast":null,"code":"var _jsxFileName = \"C:\\\\MERN Projects\\\\BombParty\\\\bombparty\\\\client\\\\src\\\\components\\\\Game\\\\Game.js\";\nimport React, { Component } from 'react';\nimport './Game.css';\nimport { socket, SocketContext } from '../../components/context/socket';\nimport waterballoon from './assets/waterballoon.png';\nimport User from './Users/User';\nimport disintegrate from 'disintegrate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar balloon_elm, input_elm, current_user, roundTimer, timer;\nconst max_seconds = 13000;\nconst correctAnswer_time = 3000;\nexport default class Game extends Component {\n  constructor() {\n    super();\n\n    this.changeTextValueByID = (id, text) => {\n      for (let index = 0; index < this.state.user_names.length; index++) {\n        if (this.state.user_names[index]['id'] === id) {\n          let duplicate = this.state.user_names;\n          duplicate[index]['text'] = text;\n          this.setState({\n            user_names: duplicate\n          });\n        }\n      }\n    };\n\n    this.reduceHealth = id => {\n      for (let index = 0; index < this.state.user_names.length; index++) {\n        if (this.state.user_names[index]['id'] === id) {\n          let duplicate = this.state.user_names;\n          duplicate[index]['hp']--;\n          this.setState({\n            user_names: duplicate\n          });\n        }\n      }\n    };\n\n    this.userTurn = data => {\n      console.log(data);\n      if (data == undefined) data = 0;\n      setTimeout(function () {\n        // shows input elemn\n        input_elm.hidden = false;\n        this.setState({\n          timePassed: this.state.timePassed\n        });\n      }.bind(this), 500);\n      timer = setInterval(function () {\n        this.setState({\n          timePassed: this.state.timePassed + 1000\n        });\n        console.log(this.state.timePassed);\n\n        if (this.state.timePassed >= max_seconds) {\n          this.setState({\n            timePassed: 0\n          });\n          this.timesUp();\n          clearInterval(timer);\n        }\n      }.bind(this), 1000);\n      socket.emit('user_animation', this.context.id);\n    };\n\n    this.userAnimation = data => {\n      if (input_elm.hidden === true) {\n        let user_elm_prev = document.getElementById(this.context.id);\n        user_elm_prev.style.animation = '';\n      }\n\n      current_user = document.getElementById(data);\n      current_user.style.animation = 'heartBeat infinite';\n      current_user.style.animationDuration = '2s';\n    };\n\n    this.handleChange = e => {\n      console.log(this.state.syllable);\n      this.changeTextValueByID(this.context.id, e.target.value);\n      const data = {\n        id: this.context.id,\n        value: e.target.value\n      };\n      this.context.emit('changedTextValue', data);\n      this.setState({\n        text: e.target.value\n      });\n    };\n\n    this.onSubmitMessage = e => {\n      if (e.keyCode === 13 && e.shiftKey === false && /\\S/.test(this.state.text)) {\n        e.preventDefault();\n\n        if (this.checkIfSyllableExists(this.state.text, this.state.syllable)) {\n          const data = {\n            text: this.state.text,\n            timeAddition: timer + correctAnswer_time\n          };\n          this.context.emit('checkAnswer', data);\n        } else {\n          this.context.emit('wrongAnswer');\n        }\n      }\n    };\n\n    this.checkIfSyllableExists = (text, syllable) => {\n      if (text.length >= syllable.length) {\n        for (let index = 0; index < text.length; index++) {\n          if (text[index] === syllable[0]) {\n            for (let j = 1; j < syllable.length; j++) {\n              if (syllable[j] !== text[j]) break;\n              if (syllable.length - 1 === j) return true;\n            }\n          }\n        }\n      }\n\n      return false;\n    };\n\n    this.state = {\n      users: [],\n      user_names: [],\n      text: \"\",\n      syllable: \"\",\n      timePassed: 0,\n      currentTime: 0\n    };\n  }\n\n  componentDidMount() {\n    // get balloon element\n    balloon_elm = document.getElementById('balloon'); // get input element\n\n    input_elm = document.getElementById('input');\n    this.context.on(\"user_joined_received\", data => {\n      this.setState({\n        users: data.users,\n        syllable: data.syllable\n      });\n      this.setState({\n        user_names: this.getUserNames(data.users)\n      });\n    });\n    this.context.on('user_disconnect', data => {\n      this.removeDisconnectedUser(data.socket_id);\n    }); // gets syllable\n\n    this.context.on('Starting Game', data => {\n      this.setState({\n        currentTime: data.roundTime\n      });\n      setTimeout(function () {\n        data.syllable = data.syllable.substring(0, data.syllable.length - 1);\n        this.setState({\n          syllable: data.syllable\n        });\n      }.bind(this), 3500); //const timesUpFunc = this.timesUp.bind(this);\n      //roundTimer = setInterval(timesUpFunc, data.roundTime*1000);\n    });\n    this.context.on('Turn', data => {\n      this.userTurn(data);\n    }); // on socket user_animation\n\n    this.context.on('user_animated', data => {\n      this.userAnimation(data);\n    }); // update users input \n\n    this.context.on('updateTextInputs', data => {\n      this.changeTextValueByID(data.id, data.value);\n    });\n    this.context.on('correctAnswer', data => {\n      data = data.substring(0, data.length - 1);\n      this.correctAnswer(data);\n    });\n    this.context.on('incorrectAnswer', () => this.incorrectAnswer());\n    this.context.on('lostHP', data => this.reduceHealth(data));\n  }\n\n  getUserNames(data) {\n    let user_names = [];\n\n    for (var i = 0; i < data.length; i++) {\n      let id = data[i].socket_id;\n      let name = data[i].name;\n      let health = data[i].health;\n      let text = \"\";\n      const user = {\n        id: id,\n        name: name,\n        text: text,\n        hp: health\n      };\n      user_names.push(user);\n    }\n\n    console.log(user_names);\n    return user_names;\n  }\n\n  removeDisconnectedUser(id) {\n    let users = this.state.users;\n    let user_names = this.state.user_names;\n\n    for (var i = 0; i < users.length; i++) {\n      if (users[i].socket_id === id) {\n        users.splice(i, 1);\n        user_names.splice(i, 1);\n        continue;\n      }\n    }\n\n    this.setState({\n      users: users,\n      user_names: user_names\n    });\n  }\n\n  correctAnswer(syllable) {\n    this.setState({\n      text: \"\",\n      syllable: syllable\n    });\n    this.changeTextValueByID(this.context.id, \"\");\n    const data = {\n      id: this.context.id,\n      value: \"\"\n    };\n    this.context.emit('changedTextValue', data); // checks if current turn \n\n    current_user.style.animation = '';\n    input_elm.hidden = true;\n  }\n\n  incorrectAnswer() {\n    balloon_elm.style.animation = '';\n    balloon_elm.style.animation = 'shake 0.5s infinite';\n    setTimeout(function () {\n      balloon_elm.style.animation = 'shake 4s infinite';\n    }, 500);\n  }\n\n  timesUp() {\n    balloon_elm.setAttribute('data-dis-type', \"self-contained\");\n    balloon_elm.setAttribute('data-dis-particle-type', 'ExplodingParticle');\n    balloon_elm.setAttribute('data-dis-reduction-factor', '100');\n    balloon_elm.setAttribute('data-dis-color', '[90, 169, 235]');\n    disintegrate.init();\n    setTimeout(function () {\n      balloon_elm.classList.remove(\"animate\");\n    }.bind(this), 1300);\n    balloon_elm.classList.add(\"animate\");\n\n    if (input_elm.hidden === false) {\n      this.context.emit('timesUp');\n      this.context.emit('startNewTurn');\n    } //clearInterval(roundTimer);\n\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Balloon-Party\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Game\",\n        id: \"game\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"syllable-txt\",\n          children: this.state.syllable\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"balloon\",\n          id: \"balloon\",\n          src: waterballoon,\n          alt: \"Balloon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"users\",\n          children: this.state.user_names && this.state.user_names.map(user => {\n            return /*#__PURE__*/_jsxDEV(User, {\n              id: user.id,\n              hp: user.hp,\n              name: user.name,\n              text: user.text\n            }, user.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 24\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"input\",\n          className: \"input-answer\",\n          hidden: true,\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"\\u05D4\\u05E7\\u05DC\\u05D3/\\u05D9 \\u05EA\\u05E9\\u05D5\\u05D1\\u05D4\",\n            \"data-placeholder-text\": \"typeheretoanswer\",\n            maxLength: \"40\",\n            value: this.state.text,\n            onChange: this.handleChange,\n            onKeyDown: this.onSubmitMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nGame.contextType = SocketContext;","map":{"version":3,"sources":["C:/MERN Projects/BombParty/bombparty/client/src/components/Game/Game.js"],"names":["React","Component","socket","SocketContext","waterballoon","User","disintegrate","balloon_elm","input_elm","current_user","roundTimer","timer","max_seconds","correctAnswer_time","Game","constructor","changeTextValueByID","id","text","index","state","user_names","length","duplicate","setState","reduceHealth","userTurn","data","console","log","undefined","setTimeout","hidden","timePassed","bind","setInterval","timesUp","clearInterval","emit","context","userAnimation","user_elm_prev","document","getElementById","style","animation","animationDuration","handleChange","e","syllable","target","value","onSubmitMessage","keyCode","shiftKey","test","preventDefault","checkIfSyllableExists","timeAddition","j","users","currentTime","componentDidMount","on","getUserNames","removeDisconnectedUser","socket_id","roundTime","substring","correctAnswer","incorrectAnswer","i","name","health","user","hp","push","splice","setAttribute","init","classList","remove","add","render","map","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport './Game.css'\r\nimport {socket, SocketContext} from '../../components/context/socket'\r\nimport waterballoon from './assets/waterballoon.png'\r\nimport User from './Users/User';\r\nimport disintegrate from 'disintegrate'\r\nvar balloon_elm, input_elm,current_user, roundTimer, timer;\r\nconst max_seconds = 13000;\r\nconst correctAnswer_time = 3000;\r\nexport default class Game extends Component {\r\n    static contextType = SocketContext;\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            users: [],\r\n            user_names: [],\r\n            text: \"\",\r\n            syllable: \"\",\r\n            timePassed: 0,\r\n            currentTime: 0,\r\n          };\r\n    }\r\n    \r\n    componentDidMount(){\r\n        // get balloon element\r\n        balloon_elm = document.getElementById('balloon');\r\n        // get input element\r\n        input_elm = document.getElementById('input');\r\n\r\n        this.context.on(\"user_joined_received\", data => {\r\n            this.setState({users:data.users, syllable:data.syllable})\r\n            this.setState({user_names: this.getUserNames(data.users)})\r\n        })\r\n        this.context.on('user_disconnect',(data) => {this.removeDisconnectedUser(data.socket_id)})\r\n\r\n        // gets syllable\r\n        this.context.on('Starting Game', (data) => {\r\n            this.setState({currentTime: data.roundTime});\r\n            setTimeout(function () {data.syllable = data.syllable.substring(0, data.syllable.length - 1); this.setState({syllable:data.syllable})}.bind(this),3500)\r\n            //const timesUpFunc = this.timesUp.bind(this);\r\n            //roundTimer = setInterval(timesUpFunc, data.roundTime*1000);\r\n        })\r\n        this.context.on('Turn', (data) => {this.userTurn(data)})\r\n        // on socket user_animation\r\n        this.context.on('user_animated', (data) => {this.userAnimation(data)})\r\n        // update users input \r\n        this.context.on('updateTextInputs', (data) => {this.changeTextValueByID(data.id,data.value)})\r\n        this.context.on('correctAnswer', (data) => {data = data.substring(0, data.length - 1); this.correctAnswer(data)})\r\n        this.context.on('incorrectAnswer', () => this.incorrectAnswer())\r\n        this.context.on('lostHP', (data) => this.reduceHealth(data))\r\n    }\r\n    getUserNames(data) {\r\n        let user_names = [];\r\n        for (var i = 0; i < data.length; i++) {\r\n                let id = data[i].socket_id;\r\n                let name = data[i].name;\r\n                let health = data[i].health;\r\n                let text = \"\";\r\n                const user = {id: id,name: name, text: text,hp:health}\r\n                user_names.push(user);\r\n            }\r\n            console.log(user_names);\r\n        return user_names;\r\n    }\r\n     removeDisconnectedUser(id) {\r\n        let users = this.state.users;\r\n        let user_names = this.state.user_names;\r\n        for (var i = 0; i < users.length; i++) {\r\n          if (users[i].socket_id === id) {\r\n              users.splice(i,1)\r\n              user_names.splice(i,1)\r\n              continue\r\n          }\r\n        }\r\n        this.setState({\r\n            users: users,\r\n            user_names: user_names\r\n        })\r\n    }\r\n    changeTextValueByID = (id,text) =>  {\r\n        for (let index = 0; index < this.state.user_names.length; index++) {\r\n            if(this.state.user_names[index]['id'] === id)\r\n            {\r\n                let duplicate = this.state.user_names;\r\n                duplicate[index]['text'] = text;\r\n                this.setState({user_names: duplicate});\r\n            }\r\n        }\r\n\r\n    }\r\n    reduceHealth = (id) => {\r\n        for (let index = 0; index < this.state.user_names.length; index++) {\r\n            if(this.state.user_names[index]['id'] === id)\r\n            {\r\n                let duplicate = this.state.user_names;\r\n                duplicate[index]['hp']--;\r\n                this.setState({user_names: duplicate});\r\n            }\r\n        }\r\n        \r\n    }\r\n    //handles user turn\r\n    userTurn = (data) => {\r\n        console.log(data);\r\n        if (data == undefined) data = 0;\r\n        setTimeout(function () {\r\n            // shows input elemn\r\n            input_elm.hidden = false; \r\n            this.setState({timePassed: this.state.timePassed})}.bind(this),500)\r\n            timer = setInterval(function() {\r\n            this.setState({timePassed: this.state.timePassed+1000})\r\n            console.log(this.state.timePassed);\r\n            if(this.state.timePassed >= max_seconds)\r\n            {\r\n                this.setState({timePassed: 0})\r\n                this.timesUp()\r\n                clearInterval(timer);\r\n            }\r\n            }.bind(this), 1000);\r\n            \r\n        \r\n        socket.emit('user_animation', this.context.id);\r\n    }\r\n    // handles user animation\r\n    userAnimation = (data) => {\r\n        if(input_elm.hidden === true) \r\n        {\r\n            let user_elm_prev = document.getElementById(this.context.id);\r\n            user_elm_prev.style.animation='';\r\n        }\r\n        current_user = document.getElementById(data);\r\n        current_user.style.animation='heartBeat infinite';\r\n        current_user.style.animationDuration='2s';\r\n    }\r\n    // handles on answer change input\r\n    handleChange = (e) => {\r\n        console.log(this.state.syllable);\r\n        this.changeTextValueByID(this.context.id,e.target.value);\r\n        const data = {id : this.context.id, value : e.target.value}\r\n        this.context.emit('changedTextValue',data)\r\n        this.setState({text: e.target.value})\r\n    }\r\n    // submits answer\r\n    onSubmitMessage = (e) => {\r\n        if(e.keyCode === 13 && e.shiftKey === false && (/\\S/.test(this.state.text))) {\r\n            e.preventDefault();\r\n            if (this.checkIfSyllableExists(this.state.text,this.state.syllable))\r\n            {\r\n            const data = { text: this.state.text, timeAddition: timer+correctAnswer_time}\r\n            this.context.emit('checkAnswer',data);\r\n            }\r\n            else\r\n            {\r\n             this.context.emit('wrongAnswer');\r\n            }\r\n          }\r\n        }\r\n        // hebrew includes function, can't use js includes\r\n        checkIfSyllableExists= (text,syllable) => {\r\n            if(text.length >= syllable.length)\r\n            {\r\n            for (let index = 0; index < text.length; index++) {\r\n                if(text[index] === syllable[0])\r\n                {\r\n                    for (let j = 1; j < syllable.length; j++) {\r\n                        if(syllable[j] !== text[j]) break;\r\n                        if(syllable.length-1 === j)\r\n                            return true;\r\n                    }\r\n                }                \r\n            }\r\n        }\r\n        return false;\r\n        }\r\n        correctAnswer (syllable) {\r\n            this.setState({text: \"\",syllable:syllable});\r\n            this.changeTextValueByID(this.context.id,\"\");\r\n            const data = {id : this.context.id, value : \"\"}\r\n            this.context.emit('changedTextValue',data)\r\n            // checks if current turn \r\n            current_user.style.animation='';\r\n            input_elm.hidden = true;\r\n        }\r\n        incorrectAnswer () {\r\n            balloon_elm.style.animation='';\r\n            balloon_elm.style.animation='shake 0.5s infinite';\r\n            setTimeout(function () {balloon_elm.style.animation='shake 4s infinite';},500)\r\n        }\r\n        timesUp () {\r\n            balloon_elm.setAttribute('data-dis-type',\"self-contained\")\r\n            balloon_elm.setAttribute('data-dis-particle-type','ExplodingParticle')\r\n            balloon_elm.setAttribute('data-dis-reduction-factor','100')\r\n            balloon_elm.setAttribute('data-dis-color','[90, 169, 235]')\r\n            disintegrate.init();\r\n            setTimeout(function () {balloon_elm.classList.remove(\"animate\");}.bind(this),1300)\r\n\r\n            balloon_elm.classList.add(\"animate\")\r\n            \r\n            if(input_elm.hidden === false){ this.context.emit('timesUp')\r\n            this.context.emit('startNewTurn')\r\n        }\r\n            //clearInterval(roundTimer);\r\n        }\r\n        \r\n    render() {\r\n        return (\r\n            <div className=\"Balloon-Party\">\r\n\r\n            <div className=\"Game\" id=\"game\"> \r\n                <span className=\"syllable-txt\">{this.state.syllable}</span>\r\n                <img className=\"balloon\" id=\"balloon\" src={waterballoon} alt=\"Balloon\"/>\r\n                <div className=\"users\">\r\n\r\n                { this.state.user_names && this.state.user_names.map(user  => {\r\n                return <User key={user.id} id={user.id} hp={user.hp} name={user.name}  text={user.text} />;\r\n        })}\r\n                </div>\r\n                <div id=\"input\" className=\"input-answer\" hidden>\r\n                <textarea placeholder=\"הקלד/י תשובה\" data-placeholder-text=\"typeheretoanswer\" maxLength=\"40\" value={this.state.text} onChange={this.handleChange} onKeyDown={this.onSubmitMessage} ></textarea>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n        }\r\n"]},"metadata":{},"sourceType":"module"}