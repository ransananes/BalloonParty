[{"C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\index.js":"1","C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\App.js":"2","C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\context\\socket.js":"3","C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Chat\\Chat.js":"4","C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Game\\Game.js":"5","C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Chat\\Messages\\Message.js":"6","C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Chat\\Messages\\TextMessage.js":"7","C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Chat\\Messages\\ConnectionMessage.js":"8","C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Chat\\Messages\\DisconnectionMessage.js":"9","C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\pages\\Room.js":"10","C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\pages\\Lobby.js":"11","C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Lobby\\LobbyMenu.js":"12","C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Game\\Users\\User.js":"13","C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Chat\\Messages\\startMessage.js":"14","C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Chat\\Messages\\StartMessage.js":"15"},{"size":192,"mtime":1628347568197,"results":"16","hashOfConfig":"17"},{"size":597,"mtime":1628863387878,"results":"18","hashOfConfig":"17"},{"size":248,"mtime":1628860660156,"results":"19","hashOfConfig":"17"},{"size":4205,"mtime":1628761582686,"results":"20","hashOfConfig":"17"},{"size":10589,"mtime":1628845710986,"results":"21","hashOfConfig":"17"},{"size":1419,"mtime":1628715967385,"results":"22","hashOfConfig":"17"},{"size":261,"mtime":1628424529319,"results":"23","hashOfConfig":"17"},{"size":183,"mtime":1628441249437,"results":"24","hashOfConfig":"17"},{"size":190,"mtime":1628701769510,"results":"25","hashOfConfig":"17"},{"size":468,"mtime":1628495039275,"results":"26","hashOfConfig":"17"},{"size":196,"mtime":1628445527756,"results":"27","hashOfConfig":"17"},{"size":616,"mtime":1628495802657,"results":"28","hashOfConfig":"17"},{"size":1000,"mtime":1628845581732,"results":"29","hashOfConfig":"17"},{"size":266,"mtime":1628718035867,"results":"30","hashOfConfig":"31"},{"size":268,"mtime":1628763027679,"results":"32","hashOfConfig":"17"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"u3okxg",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pxlav",{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},"C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\index.js",[],"C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\App.js",[],"C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\context\\socket.js",[],"C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Chat\\Chat.js",[],"C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Game\\Game.js",["66"],"import React, { Component } from 'react'\r\n\r\nimport './Game.css'\r\nimport {socket, SocketContext} from '../../components/context/socket'\r\nimport waterballoon from './assets/waterballoon.png'\r\nimport User from './Users/User';\r\n// sound\r\nimport water_drip from './assets/audio/water_drip.wav'\r\nimport water_explosion from './assets/audio/water_explode.wav'\r\nimport water_winner from './assets/audio/winner_sound_effect.wav'\r\nimport water_error from './assets/audio/water_error.wav'\r\n\r\n\r\nimport disintegrate from 'disintegrate'\r\nvar balloon_elm, input_elm,current_user, water_drip_sound, water_explosion_sound,water_winner_sound,water_error_sound, timer;\r\nconst max_seconds = 13000;\r\nconst correctAnswer_time = 2000;\r\nexport default class Game extends Component {\r\n    static contextType = SocketContext;\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            users: [],\r\n            user_names: [],\r\n            text: \"\",\r\n            syllable: \"\",\r\n            timePassed: 0,\r\n          };\r\n    }\r\n    \r\n    componentDidMount(){\r\n        // get balloon element\r\n        balloon_elm = document.getElementById('balloon');\r\n\r\n        // get input element\r\n        input_elm = document.getElementById('input');\r\n        \r\n        // declaring audios\r\n        water_drip_sound = new Audio(water_drip);\r\n        water_drip_sound.volume = 0.05;\r\n        water_drip_sound.loop = true;\r\n\r\n        water_explosion_sound = new Audio(water_explosion);\r\n        water_explosion_sound.volume = 0.3;\r\n        \r\n        water_winner_sound = new Audio(water_winner);\r\n        water_winner_sound.volume = 0.2;\r\n\r\n        water_error_sound = new Audio(water_error);\r\n        water_error_sound.volume = 0.2;\r\n        this.context.on(\"user_joined_received\", data => {\r\n            this.setState({users:data.users, syllable:data.syllable})\r\n            this.setState({user_names: this.getUserNames(data.users)})\r\n        })\r\n        this.context.on('user_disconnect',(data) => {this.removeDisconnectedUser(data.socket_id)})\r\n\r\n        // gets syllable\r\n        this.context.on('Starting Game', (data) => {\r\n            //this.setState({currentTime: data.roundTime});\r\n            // resets timer if possible\r\n            try{clearInterval(timer);}\r\n            catch{\r\n                // do nothing\r\n            }\r\n            this.setState({users:data.users,user_names: this.getUserNames(data.users)})\r\n            setTimeout(function () {data.syllable = data.syllable.substring(0, data.syllable.length - 1); water_drip_sound.play(); this.setState({syllable:data.syllable})}.bind(this),3500)\r\n            \r\n            //const timesUpFunc = this.timesUp.bind(this);\r\n            //roundTimer = setInterval(timesUpFunc, data.roundTime*1000);\r\n        })\r\n        this.context.on('Turn', (data) => {this.userTurn(data)})\r\n        // on socket user_animation\r\n        this.context.on('user_animated', (data) => {this.userAnimation(data)})\r\n        // update users input \r\n        this.context.on('updateTextInputs', (data) => {this.changeTextValueByID(data.id,data.value)})\r\n        this.context.on('correctAnswer', (data) => {data = data.substring(0, data.length - 1); this.correctAnswer(data)})\r\n        this.context.on('incorrectAnswer', () => this.incorrectAnswer())\r\n        this.context.on('setWaterBalloonExplosion', () => this.timesUp(false));\r\n        this.context.on('lostHP', (data) => this.reduceHealth(data))\r\n        this.context.on('Winner', (data) => this.Winner(data))\r\n    }   \r\n    getUserNames(data) {\r\n        let user_names = [];\r\n        for (var i = 0; i < data.length; i++) {\r\n                let id = data[i].socket_id;\r\n                let name = data[i].name;\r\n                let health = data[i].health;\r\n                let text = \"\";\r\n                const user = {id: id,name: name, text: text,hp:health}\r\n                user_names.push(user);\r\n            }\r\n        return user_names;\r\n    }\r\n     removeDisconnectedUser(id) {\r\n        let users = this.state.users;\r\n        let user_names = this.state.user_names;\r\n        for (var i = 0; i < users.length; i++) {\r\n          if (users[i].socket_id === id) {\r\n              users.splice(i,1)\r\n              user_names.splice(i,1)\r\n              continue\r\n          }\r\n        }\r\n        this.setState({\r\n            users: users,\r\n            user_names: user_names\r\n        })\r\n    }\r\n    changeTextValueByID = (id,text) =>  {\r\n        for (let index = 0; index < this.state.user_names.length; index++) {\r\n            if(this.state.user_names[index]['id'] === id)\r\n            {\r\n                let duplicate = this.state.user_names;\r\n                duplicate[index]['text'] = text;\r\n                this.setState({user_names: duplicate});\r\n            }\r\n        }\r\n\r\n    }\r\n    reduceHealth = (id) => {\r\n        for (let index = 0; index < this.state.user_names.length; index++) {\r\n            if(this.state.user_names[index]['id'] === id)\r\n            {\r\n                let duplicate = this.state.user_names;\r\n                duplicate[index]['hp']--;\r\n                this.setState({user_names: duplicate});\r\n            }\r\n        }\r\n        \r\n    }\r\n    //handles user turn\r\n    userTurn = (data) => {\r\n        if (data == undefined) data = 0;\r\n\r\n        setTimeout(function () {\r\n            // shows input elemn\r\n            input_elm.hidden = false; \r\n            this.setState({timePassed: this.state.timePassed-data})}.bind(this),500)\r\n            timer = setInterval(function() {\r\n            this.setState({timePassed: this.state.timePassed+1000})\r\n            if(this.state.timePassed >= max_seconds)\r\n            {\r\n                this.setState({timePassed: 0})\r\n                this.timesUp(true)\r\n                clearInterval(timer);\r\n            }\r\n            }.bind(this), 1000);\r\n            \r\n        \r\n        socket.emit('user_animation', this.context.id);\r\n    }\r\n    // handles user animation\r\n    userAnimation = (data) => {\r\n        if(input_elm.hidden === true) \r\n        {\r\n            let user_elm_prev = document.getElementById(this.context.id);\r\n            user_elm_prev.style.animation='';\r\n        }\r\n        current_user = document.getElementById(data);\r\n        current_user.style.animation='heartBeat infinite';\r\n        current_user.style.animationDuration='2s';\r\n    }\r\n    // handles on answer change input\r\n    handleChange = (e) => {\r\n        this.changeTextValueByID(this.context.id,e.target.value);\r\n        const data = {id : this.context.id, value : e.target.value}\r\n        this.context.emit('changedTextValue',data)\r\n        this.setState({text: e.target.value})\r\n    }\r\n    // submits answer\r\n    onSubmitMessage = (e) => {\r\n        if(e.keyCode === 13 && e.shiftKey === false && (/\\S/.test(this.state.text))) {\r\n            e.preventDefault();\r\n            if (this.checkIfSyllableExists(this.state.text,this.state.syllable))\r\n            {\r\n            const data = { text: this.state.text, timeAddition: timer+correctAnswer_time}\r\n            this.context.emit('checkAnswer',data);\r\n            }\r\n            else\r\n            {\r\n             this.context.emit('wrongAnswer');\r\n            }\r\n          }\r\n        }\r\n        // hebrew includes function, can't use js includes\r\n        checkIfSyllableExists= (text,syllable) => {\r\n            if(text.length >= syllable.length)\r\n            {\r\n            for (let index = 0; index < text.length; index++) {\r\n                if(text[index] === syllable[0])\r\n                {\r\n                    for (let j = 1; j < syllable.length; j++) {\r\n                        if(syllable[j] !== text[j]) break;\r\n                        if(syllable.length-1 === j)\r\n                            return true;\r\n                    }\r\n                }                \r\n            }\r\n        }\r\n        return false;\r\n        }\r\n        correctAnswer (syllable) {\r\n            this.setState({text: \"\",syllable:syllable});\r\n            this.changeTextValueByID(this.context.id,\"\");\r\n            const data = {id : this.context.id, value : \"\"}\r\n            this.context.emit('changedTextValue',data)\r\n            // checks if current turn \r\n            if(current_user !== undefined) current_user.style.animation='';\r\n            input_elm.hidden = true;\r\n            //resets timer;\r\n            clearInterval(timer);\r\n            \r\n        }\r\n        incorrectAnswer () {\r\n            balloon_elm.style.animation='';\r\n            balloon_elm.style.animation='shake 0.5s infinite';\r\n            water_error_sound.play();\r\n            setTimeout(function () {balloon_elm.style.animation='shake 4s infinite';},500)\r\n        }\r\n        timesUp (emit) {\r\n            console.log(\"timesup\");\r\n            balloon_elm.style.animation='';\r\n            // exploding water animation\r\n            balloon_elm.setAttribute('data-dis-type',\"self-contained\")\r\n            balloon_elm.setAttribute('data-dis-particle-type','ExplodingParticle')\r\n            balloon_elm.setAttribute('data-dis-reduction-factor','100')\r\n            balloon_elm.setAttribute('data-dis-color','[90, 169, 235]')\r\n            disintegrate.init();\r\n            balloon_elm.classList.add(\"animate\")\r\n            setTimeout(function () {\r\n                balloon_elm.classList.remove(\"animate\"); water_explosion_sound.play();\r\n                if(emit){\r\n                    this.context.emit('startNewTurn') \r\n                }\r\n            }.bind(this),1300)\r\n            if(emit)\r\n            this.context.emit('timesUp')\r\n\r\n\r\n            \r\n\r\n        }\r\n        Winner() {\r\n            clearInterval(timer);\r\n            water_drip_sound.pause();\r\n            water_winner_sound.play();\r\n        }\r\n        \r\n    render() {\r\n        return (\r\n            <div className=\"Balloon-Party\">\r\n\r\n            <div className=\"Game\" id=\"game\"> \r\n                <span className=\"syllable-txt\">{this.state.syllable}</span>\r\n                <img className=\"balloon\" id=\"balloon\" src={waterballoon} alt=\"Balloon\"/>\r\n                <div className=\"users\">\r\n\r\n                { this.state.user_names && this.state.user_names.map(user  => {\r\n                return <User key={user.id} id={user.id} hp={user.hp} name={user.name}  text={user.text} />;\r\n        })}\r\n                </div>\r\n                <div id=\"input\" className=\"input-answer\" hidden>\r\n                <textarea placeholder=\"הקלד/י תשובה\" data-placeholder-text=\"typeheretoanswer\" maxLength=\"40\" value={this.state.text} onChange={this.handleChange} onKeyDown={this.onSubmitMessage} ></textarea>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n        }\r\n","C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Chat\\Messages\\Message.js",[],"C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Chat\\Messages\\TextMessage.js",[],"C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Chat\\Messages\\ConnectionMessage.js",[],"C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Chat\\Messages\\DisconnectionMessage.js",[],"C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\pages\\Room.js",[],"C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\pages\\Lobby.js",[],"C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Lobby\\LobbyMenu.js",[],"C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Game\\Users\\User.js",["67","68"],"import React, {Component} from 'react';\r\nimport duckuser from '../assets/duck-user.png'\r\nimport './User.css'\r\n\r\nclass User extends Component {\r\n    render () {\r\n        let deg = 0;\r\n    switch(this.props.hp){\r\n        case 3:\r\n          deg = 0\r\n          break;\r\n        case 2:\r\n          deg = 170\r\n          break;\r\n        case 1:\r\n            deg = 180\r\n        case 0: \r\n            deg = 77\r\n        default:\r\n            deg = 0\r\n      }\r\n  //  let deg = 45 ;\r\n//    const circle_users = 'transform: rotate('+deg+ ')translateX(100px)'\r\n    //transform: `rotate(${deg}deg) rotate(-${deg}deg)`\r\n    return (\r\n        <div className=\"user\" id={this.props.id}>\r\n            <span className=\"name\" dir=\"auto\">{this.props.name}</span>\r\n            \r\n            <img className=\"avatar\" src={duckuser} style={{filter: 'hue-rotate('+deg+'deg)'}} alt={this.props.name}/>\r\n            <span className=\"input\" dir=\"auto\">{this.props.text}</span>\r\n\r\n        </div>\r\n    )\r\n}\r\n}\r\n\r\nexport default User\r\n","C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Chat\\Messages\\startMessage.js",[],"C:\\MERN Projects\\BombParty\\bombparty\\client\\src\\components\\Chat\\Messages\\StartMessage.js",["69"],"import React from 'react';\r\n\r\n\r\nconst StartMessage = (props) => {\r\n  return <div className=\"message-game-start\">\r\n    {props.time === 0 ? \" המשחק התחיל\" : \" המשחק יתחיל בעוד\" + \" \\t\" +props.time}\r\n     </div>;\r\n}\r\nexport default StartMessage;\r\n",{"ruleId":"70","severity":1,"message":"71","line":133,"column":18,"nodeType":"72","messageId":"73","endLine":133,"endColumn":20},{"ruleId":"74","severity":1,"message":"75","line":17,"column":9,"nodeType":"76","messageId":"77","endLine":18,"endColumn":21},{"ruleId":"74","severity":1,"message":"78","line":19,"column":9,"nodeType":"76","messageId":"79","endLine":20,"endColumn":20},{"ruleId":"80","severity":1,"message":"81","line":6,"column":62,"nodeType":"72","messageId":"82","endLine":6,"endColumn":63},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","Expected a 'break' statement before 'default'.","default","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat"]